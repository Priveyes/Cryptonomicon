This document contains a series of test cases for the cryptonomicon tool.  These test cases exercise the cryptographic functions to ensure that they are working correctly and that data is getting in and out of the tool correctly.  

Check the usage statement:

$ ./cryptonomicon 
Usage:
	encrypt [ecb|cbc] key=Key data=HexString
	decrypt [ecb|cbc] key=Key data=HexString
	encryptRSA key=keyfile data=HexString
	decryptRSA key=keyfile data=HexString
	encrypt key=Key PIN=XXXX PAN=XXXXXXXXXXXXXXXX
	decrypt key=Key PIN=HexPINBlock PAN=XXXXXXXXXXXXXXXX
	checkCertificate key=keyfile data=XXXXXX...
	kcv key=Key [kek=Kek]
	sha1 data=HexString
	checkRSAKey key=keyfile [kek=Key] [ecb|cbc] (omit filename for format info)
	createPVV key=keyName PAN=XXXXXXXXXXXXXXXX [PIN=XXXX | PVV=XXXX]
	cvc key=CVKname PAN=XXXXXXXXXXXXXXXX data=YYMMSVC (data is date and 3 service code)
	udk key=MDK PAN=XXXXXXXXXXXXXXX seq=XX (seq is sequence number)
	skd key=UDK ATC=XXXX [unp=XXXXXXXX]
	    (EMV 2000 uses ATC, M/Chip uses ATC and unpredictable number)
	generateAC key=SessionKey data=DataBlocks (uses 80... padding, session key)
	generateAC key=IMK PAN=XXX seq=XX ATC=XXXX [unp=XXXXXXXX] data=DataBlocks
	generateAC_Visa_CVN10 key=UDK data=DataBlocks (uses 00.. padding, direct UDK)
	generateAC_Visa_CVN10 key=MDK PAN=XXX seq=XX data=DataBlocks
	getARPC_M1 key=UDK ARQC=XXXXXXXXXXXXXXXX data=XXXX (CSU or ASCII field 39)
	getARPC_M2 key=SKD ARQC=XXXXXXXXXXXXXXXX data=XXXX (CSU + proprietary auth data)
	getRC key=UDK ARQC=XXXXXXXXXXXXXXXX ARPC=XXXXXXXXXXXXXXXX
	checkParity key=Key
	export3components key=Key

Check DES encryption/decryption in ECB and CBC modes:

$ ./cryptonomicon encrypt ecb key=0123456789ABCDEF0123456789ABCDEF data=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Encrypted data:  556E08E9F883B4F9556E08E9F883B4F9556E08E9F883B4F9556E08E9F883B4F9

$ ./cryptonomicon decrypt ecb key=0123456789ABCDEF0123456789ABCDEF data=556E08E9F883B4F9556E08E9F883B4F9556E08E9F883B4F9556E08E9F883B4F9
Decrypted data:  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

$ ./cryptonomicon encrypt cbc key=0123456789ABCDEF0123456789ABCDEF data=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Encrypted data:  556E08E9F883B4F992BA207D3EA2E885F9D0E03C1F2C4EE6034B1F7E7A2A02AD

$ ./cryptonomicon decrypt cbc key=0123456789ABCDEF0123456789ABCDEF data=556E08E9F883B4F992BA207D3EA2E885F9D0E03C1F2C4EE6034B1F7E7A2A02AD
Decrypted data:  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Check the key check value (KCV), which is generated by enrypting a block of zeros with the DES key and taking the first two or three bytes of output:

$ ./cryptonomicon kcv key=0123456789ABCDEF0123456789ABCDEF
KCV is D5D44F

Check the card verification values for magstripe, chip, and manual entry:

$ ./cryptonomicon cvc key=0123456789ABCDEF0123456789ABCDEF PAN=1234560123456789 data=2212226
CVC/CVV is 538, iCVC/iCVV is 774, CVC2/CVV2 is 802

Using these generateAC functions excercises the UDK and SKD generation as well; this can be double-checked by comparing the "Derived key" and "Session key" outputs against the udk and skd commands with the same inputs.

Check the authentication cryptogram (AC) generation for MasterCard M/Chip cards:

$ ./cryptonomicon generateAC key=0123456789ABCDEF0123456789ABCDEF PAN=1234560123456789 seq=01 ATC=0001 unp=12345678 data=000000003000000000000000046680C0048000095218091701370438DE5C00005803A0A800
Derived key is A746F4A84C8A253BE61FE9517C2A5D5B
Session key is 7B7E7212B2E37A68B21ECB9624294FC0
Split key, 7B7E7212B2E37A68 and B21ECB9624294FC0
Data block 1, 0x0000000030000000
XORed 0x0000000030000000 Encrypted 0xA624ADBC1711AE83
Data block 2, 0x00000000046680C0
XORed 0xA624ADBC13772E43 Encrypted 0x9A0B706B443401A5
Data block 3, 0x0480000952180917
XORed 0x9E8B7062162C08B2 Encrypted 0x16F6FEBE4BDF49B1
Data block 4, 0x01370438DE5C0000
XORed 0x17C1FA86958349B1 Encrypted 0x0E686D5E0943E9E4
Data block 5, 0x5803A0A800800000
XORed 0x566BCDF609C3E9E4 Encrypted 0x1537F0A33D8D3AEE
Last block, performing final decrypt/encrypt operation
Cryptogram is 53365076B52430AF

Check the AC generation for Visa CVN 18 cards (also applies to EMV CVN 5 cards):

$ ./cryptonomicon generateAC key=0123456789ABCDEF0123456789ABCDEF PAN=1234560123456789 seq=01 ATC=0001 data=000000003000000000000000046680C0048000095218091701370438DE5C00005803A0A800
Derived key is A746F4A84C8A253BE61FE9517C2A5D5B
Session key is 898F3ED479A32017EF6122A06E2AD111
Split key, 898F3ED479A32017 and EF6122A06E2AD111
Data block 1, 0x0000000030000000
XORed 0x0000000030000000 Encrypted 0x8FB252F32BA4FD81
Data block 2, 0x00000000046680C0
XORed 0x8FB252F32FC27D41 Encrypted 0x194849BB84BD0095
Data block 3, 0x0480000952180917
XORed 0x1DC849B2D6A50982 Encrypted 0xF9F56D33CC43CB61
Data block 4, 0x01370438DE5C0000
XORed 0xF8C2690B121FCB61 Encrypted 0xAE49E35BE863BB25
Data block 5, 0x5803A0A800800000
XORed 0xF64A43F3E8E3BB25 Encrypted 0x3FB4156D9D02CF0D
Last block, performing final decrypt/encrypt operation
Cryptogram is 4172E9AD14FD900A

Check AC generation for Visa CVN 10 cards:

$ ./cryptonomicon generateAC_Visa_CVN10 key=0123456789ABCDEF0123456789ABCDEF PAN=1234560123456789 seq=01 data=000000003000000000000000046680C0048000095218091701370438DE5C00005803A0A800
Derived key is A746F4A84C8A253BE61FE9517C2A5D5B
Split key, A746F4A84C8A253B and E61FE9517C2A5D5B
Data block 1, 0x0000000030000000
XORed 0x0000000030000000 Encrypted 0xDBF35DC1BD9C5C87
Data block 2, 0x00000000046680C0
XORed 0xDBF35DC1B9FADC47 Encrypted 0x6982135CD0269112
Data block 3, 0x0480000952180917
XORed 0x6D021355823E9805 Encrypted 0xC1B151C8171C2233
Data block 4, 0x01370438DE5C0000
XORed 0xC08655F0C9402233 Encrypted 0xA52F8E3C1FB739E5
Data block 5, 0x5803A0A800000000
XORed 0xFD2C2E941FB739E5 Encrypted 0xA0AFBA98F980E407
Last block, performing final decrypt/encrypt operation
Cryptogram is 30A3AAE245C6A80C

Generate a PIN verification value (PVV) hash:

$ ./cryptonomicon createPVV key=0123456789ABCDEF0123456789ABCDEF PAN=1234560123456789 PIN=1234
PVV is 6667

Brute-force the PINs that will generate a given PVV hash; may yeild no PINs, or many:

$ ./cryptonomicon createPVV key=0123456789ABCDEF0123456789ABCDEF PAN=1234560123456789 PVV=6667
PIN 1234 matches target PVV
PIN 3713 matches target PVV
PIN 6768 matches target PVV

Generate an ARPC using method 1, for Visa CVN 10 (3030 corresponds to the ASCII for "00"):

$ ./cryptonomicon getARPC_M1 key=A746F4A84C8A253BE61FE9517C2A5D5B ARQC=30A3AAE245C6A80C data=3030
ARPC is 4302D8B581820548

Extract the response code from the ARPC:

$ ./cryptonomicon getRC key=A746F4A84C8A253BE61FE9517C2A5D5B ARPC=4302D8B581820548 ARQC=30A3AAE245C6A80C
Response code is 3030000000000000

Generate an ARPC using method 1 with a card status update of 0x031F (Visa CVN 18):

$ ./cryptonomicon getARPC_M1 key=A746F4A84C8A253BE61FE9517C2A5D5B ARQC=53365076B52430AF data=03F1
ARPC is 518DF217D63A1394

Extract the CSU from the ARPC:

$ ./cryptonomicon getRC key=A746F4A84C8A253BE61FE9517C2A5D5B ARPC=518DF217D63A1394 ARQC=53365076B52430AF
Response code is 03F1000000000000

Create a fake certificate authority RSA key file (using the demo programs in the Flint library to generate the key and CRT components):

$ cat > CA_RSA1408.txt
8b0323bb742bc6ebae17d35f20e9fddeee45bba7c2e999bfd76a03c685ade114d3114e65668c7832fbb83ad311ed705fc0c2ebaa3c1446168364f723a03aad70bd522f7c49385bc800e549c881dd23de538cf37733b0fe07ffb3e0dcab037dbffa08b6ac4385c627febc530155a7a4ad877b138292e66642cd1955f5056e3e4016c199492586295d7a50a13c911ed8e379b0c149dc8341e05e9e5f830b0105bdfa2ed55897219401841c64f9028fb069
03
5cacc27cf81d2f47c9653794c09bfe949ed927c52c9bbbd53a46ad2f03c940b88cb6344399b2facca7d027376148f5952b2c9d1c280d840f02434f6d157c73a07e36ca52db7ae7daab438685abe8c29437b34cfa2275feaefe82e70b442a5657dc28ea31f47eaf7da49f97133e9c2438704e093ccaff88aae7e29e6be394010373273e00706516fd17869b8a082b50c6816d764f2da95dd8e6eeb9b3924aeb5ae1885fe2778985900a8c6975d2430aab
e994c4b4a936c37c319fe3b077c41ff5fdff5127c46014faec943ec03557405b01cfa75641e3cbff1d84bfe1e1042de9e40225636acaa6a86e89a149d4c47b3359c189a39918132e73a4bd9d693d9bd057ccb80486a6da01
985ac1971b8d38bffe2b73b0dd039ef589cd9f3cb35d595df271c6e72d0fd8e76f75c0fcee2c70bbcc81fc669bea58f7f304928a1a1339114902ee894340b9e7aa76bf5216789187343d87e77a95afd91c7d0ec3c0844669
9bb883231b79d7a821154275a52d6aa3feaa361a82eab8a74862d480238f803cabdfc4e42bed32aa13add54140ad73f142ac18ecf1dc6f1af45bc0dbe32da777912bb117bb65621ef7c329139b7e67e03a887aadaf19e6ab
6591d664bd08d07ffec7a275e8ad14a3b133bf7dcce8e63ea1a12f44c8b53b44f4f92b534972f5d28856a84467f190a54cadb706bc0cd0b630ac9f062cd5d1451c4f2a36b9a5b65a22d3afefa70e753b68535f2d2b02d99b
62ee80d36ddb7f90c227b104dc2d65d6c59ecb0e65d8c0c8d1a6481207fe90aae89d9eb028a8d7ee491b1b14f76d97329d69b1b6fd0fdbb25748c107c56d95484198a02b119fffdffcfd608a0739833b167877f96c721012

Validate the key:

$ ./cryptonomicon checkRSAKey key=CA_RSA1408.txt
RSA key is valid.

Generate a fake issuer key:

$ cat > Issuer_RSA1408.txt
756c924116cd400fde6f7c46520b579527bc1a921ceb09f183724023b5bc16f78484cf85a2eb11ccdc2f890345b59a9bb5d6b89e6cc11b66b649fa58889707ec8e2fc787db749d828f760c67f9adb0ae059ae92971816075542cf0f250e71285bcd71f8fd9363380b0485e1154ab2f242f79a3bfff407f5c69587c70023cf3d7bd0a5797855e5e9282fbe6299b289fda2a590dafb3f426cf0d24127b9adc9886d4eb3fa5541aeb73f3a1ce1ea1210de5
03
4e486180b9de2ab53ef4fd8436b23a636fd2bc61689cb14bacf6d56d23d2b9fa58588a59174761333d7506022e7911bd23e47b144880bcef243151905b0f5a9db41fda5a924dbe570a4eb2effbc9207403bc9b70f656404d47acded1797312a19c1ae50b271e9b2f50ef0891740de46925302a10391d7c802ac88d08fd1d952fc153958d81ddbdeecbf26da813f766d227601dbe181d83006f12ee4d25f27a62c0c2800bea4ef9858f3644ab291c486b
e5eaf149bca45d0f48e0264506f01ab4388986b251e6783f850c5c943bdbec8ce955ab8f59137e331debd623d1e7a5e92f7bc2f6850f0bd9a12a3245a459932fdbeb762ee3b584b9dfd2dcb71031ddd5018aefcf483e268d
82beb16e5e16198409cea1ba179830057e584a84d4afe046f2a508136db8580f3fd5fd532d7d15dcfd21211f70aa1bc321947eb6f82679c54e1eaecceb6e4f1e8a9c36d8fe3b5c38d3f4a2dc647297569b45774e9b387ab9
99474b867dc2e8b4db40198359f56722d05baf218beefad5035d930d7d3d485df0e3c7b4e60cfeccbe9d396d369a6e9b74fd2ca458b4b291161c2183c2e6621fe7f24ec9ed23add13fe1e87a0acbe938abb1f534dad419b3
5729cb9ee9641102b1346bd165102003a99031ade31fead9f718b00cf3d03ab4d539538cc8fe0e93536b6b6a4b1c12821662ff24a56efbd8debf1f33479edf69b1bd79e5fed23d7b37f86c92eda1ba39bcd8fa34677afc7b
194a637734c3b3140cc401afff960d0ba1944d69b61b2821e09d8eeeeae4712ccc5d7989e35f60aecf92bf32bfa3c5738b6ddf4174966a55be020e1cda253cca10d785cd592316f729f558116cada805c680f0f1928bb40a

Validate the key:

$ ./cryptonomicon checkRSAKey key=Issuer_RSA1408.txt
RSA key is valid.

Put together an EMV issuer certificate file (type 2) using the issuer key, and generate the SHA1 hash:

$ ./cryptonomicon sha1 data=02123456ff12240123450101b001756c924116cd400fde6f7c46520b579527bc1a921ceb09f183724023b5bc16f78484cf85a2eb11ccdc2f890345b59a9bb5d6b89e6cc11b66b649fa58889707ec8e2fc787db749d828f760c67f9adb0ae059ae92971816075542cf0f250e71285bcd71f8fd9363380b0485e1154ab2f242f79a3bfff407f5c69587c70023cf3d7bd0a5797855e5e9282fbe6299b289fda2a590dafb3f426cf0d24127b9adc9886d4eb3fa5541aeb73f3a1ce1ea1210de503
SHA1 is 9200730FA1C8F78BF2ABB216C960D5DF5FE92214

Sign the issuer certificate data using the certificate authority key.  Note that the "sign" operation is the same as a private key decryption.

$ ./cryptonomicon decryptRSA key=CA_RSA1408.txt data=6a02123456ff12240123450101b001756c924116cd400fde6f7c46520b579527bc1a921ceb09f183724023b5bc16f78484cf85a2eb11ccdc2f890345b59a9bb5d6b89e6cc11b66b649fa58889707ec8e2fc787db749d828f760c67f9adb0ae059ae92971816075542cf0f250e71285bcd71f8fd9363380b0485e1154ab2f242f79a3bfff407f5c69587c70023cf3d7bd0a5797855e5e9282fbe6299200730FA1C8F78BF2ABB216C960D5DF5FE92214bc
Output: 5C35EDE55EFEAE35D28E0A88EABA5E7A6AAF451D52CD215AD2C66FE1CBD75AB6B39040120364BF1D7AEBEDF984C8C6CF499CCAD4EDBFA2F3BF2DF14DC95BEC3390195C1ADF30403CE19B2069C2B3EFE3B1877A2AACB4F70E53362089022C2E4ADD68A8B60E23034FD592260EB4F4B0766986DC2EB4B96919CA9613AF27E9D9F1AB7B73C66FC3B02C41A7FC303282A2ED217BBE01C9FAA213BBEAFEAFD9F0331C7E0C9AF5BD432877F5DC55B6A20336B0

Check the output of the sign operation, to see if it yeilds a correctly formatted issuer certificate:

$ ./cryptonomicon checkCertificate key=CA_RSA1408.txt data=5C35EDE55EFEAE35D28E0A88EABA5E7A6AAF451D52CD215AD2C66FE1CBD75AB6B39040120364BF1D7AEBEDF984C8C6CF499CCAD4EDBFA2F3BF2DF14DC95BEC3390195C1ADF30403CE19B2069C2B3EFE3B1877A2AACB4F70E53362089022C2E4ADD68A8B60E23034FD592260EB4F4B0766986DC2EB4B96919CA9613AF27E9D9F1AB7B73C66FC3B02C41A7FC303282A2ED217BBE01C9FAA213BBEAFEAFD9F0331C7E0C9AF5BD432877F5DC55B6A20336B0
Raw decrypted data:
6A02123456FF12240123450101B001756C924116CD400FDE6F7C46520B579527BC1A921CEB09F183724023B5BC16F78484CF85A2EB11CCDC2F890345B59A9BB5D6B89E6CC11B66B649FA58889707EC8E2FC787DB749D828F760C67F9ADB0AE059AE92971816075542CF0F250E71285BCD71F8FD9363380B0485E1154AB2F242F79A3BFFF407F5C69587C70023CF3D7BD0A5797855E5E9282FBE6299200730FA1C8F78BF2ABB216C960D5DF5FE92214BC
Certificate appears to be complete and valid
Certificate, type 0x02:
Issuer ID: 123456FF
Expiration date: 1224
Serial number: 012345
Hash algorithm: 01
Public key algorithm: 01
Public key length: B0
Exponent length: 01
Public key: 756C924116CD400FDE6F7C46520B579527BC1A921CEB09F183724023B5BC16F78484CF85A2EB11CCDC2F890345B59A9BB5D6B89E6CC11B66B649FA58889707EC8E2FC787DB749D828F760C67F9ADB0AE059AE92971816075542CF0F250E71285BCD71F8FD9363380B0485E1154AB2F242F79A3BFFF407F5C69587C70023CF3D7BD0A5797855E5E9282FBE629
Hash: 9200730FA1C8F78BF2ABB216C960D5DF5FE92214

Check key parity checking; if any bytes have an even number of 1s, then it's even parity: 

$ ./cryptonomicon checkParity key=0123456789ABCDEF0123456789ABCDEF
Key is odd parity.

$ ./cryptonomicon checkParity key=0123456789ABCDEF0123456789ABCDEE
Byte 15 is even parity.
Key is even parity.

Check key exporting.  Output should be 3 random numbers that XOR together to make the key:

$ ./cryptonomicon export3components key=0123456789ABCDEF
Three components:

C6C226625F1C7657
A00698296126BBC4
67E7FB2CB791007C

Check by XORing columns to ensure the output matches the input: C^A^6 = 0, 6^0^7 = 1, etc.


